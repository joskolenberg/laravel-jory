<?php

namespace JosKolenberg\LaravelJory\Tests;

use JosKolenberg\LaravelJory\Facades\Jory;
use JosKolenberg\LaravelJory\Tests\JoryResources\Unregistered\PersonJoryResourceWithScopes;

class SortTest extends TestCase
{
    /** @test */
    public function it_can_sort_a_query_ascending()
    {
        $response = $this->json('GET', 'jory/band', [
            'jory' => [
                'fld' => 'name',
                'srt' => 'name',
            ]
        ]);

        $expected = [
            'data' => [
                [
                    'name' => 'Beatles',
                ],
                [
                    'name' => 'Jimi Hendrix Experience',
                ],
                [
                    'name' => 'Led Zeppelin',
                ],
                [
                    'name' => 'Rolling Stones',
                ],
            ],
        ];
        $response->assertStatus(200)->assertExactJson($expected)->assertJson($expected);

        $this->assertQueryCount(1);
    }

    /** @test */
    public function it_can_sort_a_query_descending()
    {
        $response = $this->json('GET', 'jory/band', [
            'jory' => [
                'fld' => 'name',
                'srt' => '-name',
            ],
        ]);

        $expected = [
            'data' => [
                [
                    'name' => 'Rolling Stones',
                ],
                [
                    'name' => 'Led Zeppelin',
                ],
                [
                    'name' => 'Jimi Hendrix Experience',
                ],
                [
                    'name' => 'Beatles',
                ],
            ],
        ];
        $response->assertStatus(200)->assertExactJson($expected)->assertJson($expected);

        $this->assertQueryCount(1);
    }

    /** @test */
    public function it_can_sort_a_query_descending_2()
    {
        $response = $this->json('GET', 'jory/band', [
            'jory' => [
                'fld' => 'name',
                'srt' => '-year_start',
            ],
        ]);

        $expected = [
            'data' => [
                [
                    'name' => 'Led Zeppelin',
                ],
                [
                    'name' => 'Jimi Hendrix Experience',
                ],
                [
                    'name' => 'Rolling Stones',
                ],
                [
                    'name' => 'Beatles',
                ],
            ],
        ];
        $response->assertStatus(200)->assertExactJson($expected)->assertJson($expected);

        $this->assertQueryCount(1);
    }

    /** @test */
    public function it_can_sort_a_query_on_multiple_fields_1()
    {
        $response = $this->json('GET', 'jory/band', [
            'jory' => [
                'fld' => 'name',
                'srt' => ["-year_end","name"],
            ],
        ]);

        $expected = [
            'data' => [
                [
                    'name' => 'Led Zeppelin',
                ],
                [
                    'name' => 'Beatles',
                ],
                [
                    'name' => 'Jimi Hendrix Experience',
                ],
                [
                    'name' => 'Rolling Stones',
                ],
            ],
        ];
        $response->assertStatus(200)->assertExactJson($expected)->assertJson($expected);
    }

    /** @test */
    public function it_can_sort_a_query_on_multiple_fields_2()
    {
        $response = $this->json('GET', 'jory/band', [
            'jory' => [
                'fld' => 'name',
                'srt' => ["-year_end","-name"],
            ],
        ]);

        $expected = [
            'data' => [
                [
                    'name' => 'Led Zeppelin',
                ],
                [
                    'name' => 'Jimi Hendrix Experience',
                ],
                [
                    'name' => 'Beatles',
                ],
                [
                    'name' => 'Rolling Stones',
                ],
            ],
        ];
        $response->assertStatus(200)->assertExactJson($expected)->assertJson($expected);

        $this->assertQueryCount(1);
    }

    /** @test */
    public function it_can_sort_a_query_on_multiple_fields_3()
    {
        $response = $this->json('GET', 'jory/band', [
            'jory' => [
                'fld' => 'name',
                'srt' => ["year_end","name"],
            ],
        ]);

        $expected = [
            'data' => [
                [
                    'name' => 'Rolling Stones',
                ],
                [
                    'name' => 'Beatles',
                ],
                [
                    'name' => 'Jimi Hendrix Experience',
                ],
                [
                    'name' => 'Led Zeppelin',
                ],
            ],
        ];
        $response->assertStatus(200)->assertExactJson($expected)->assertJson($expected);

        $this->assertQueryCount(1);
    }

    /** @test */
    public function it_can_sort_a_query_on_multiple_fields_4()
    {
        $response = $this->json('GET', 'jory/band', [
            'jory' => [
                'fld' => 'name',
                'srt' => ["year_end","-name"],
            ],
        ]);

        $expected = [
            'data' => [
                [
                    'name' => 'Rolling Stones',
                ],
                [
                    'name' => 'Jimi Hendrix Experience',
                ],
                [
                    'name' => 'Beatles',
                ],
                [
                    'name' => 'Led Zeppelin',
                ],
            ],
        ];
        $response->assertStatus(200)->assertExactJson($expected)->assertJson($expected);

        $this->assertQueryCount(1);
    }

    /** @test */
    public function it_can_sort_a_relation()
    {
        $response = $this->json('GET', 'jory/band', [
            'jory' => [
                'fld' => 'name',
                'srt' => 'name',
                'rlt' =>
                    [
                        'people' =>
                            [
                                'fld' => 'full_name',
                                'srt' => 'last_name',
                            ],
                    ],
            ],
        ]);

        $expected = [
            'data' => [
                [
                    'name' => 'Beatles',
                    'people' => [
                        [
                            'full_name' => 'George Harrison',
                        ],
                        [
                            'full_name' => 'John Lennon',
                        ],
                        [
                            'full_name' => 'Paul McCartney',
                        ],
                        [
                            'full_name' => 'Ringo Starr',
                        ],
                    ],
                ],
                [
                    'name' => 'Jimi Hendrix Experience',
                    'people' => [
                        [
                            'full_name' => 'Jimi Hendrix',
                        ],
                        [
                            'full_name' => 'Mitch Mitchell',
                        ],
                        [
                            'full_name' => 'Noel Redding',
                        ],
                    ],
                ],
                [
                    'name' => 'Led Zeppelin',
                    'people' => [
                        [
                            'full_name' => 'John Bonham',
                        ],
                        [
                            'full_name' => 'John Paul Jones',
                        ],
                        [
                            'full_name' => 'Jimmy Page',
                        ],
                        [
                            'full_name' => 'Robert Plant',
                        ],
                    ],
                ],
                [
                    'name' => 'Rolling Stones',
                    'people' => [
                        [
                            'full_name' => 'Mick Jagger',
                        ],
                        [
                            'full_name' => 'Keith Richards',
                        ],
                        [
                            'full_name' => 'Charlie Watts',
                        ],
                        [
                            'full_name' => 'Ronnie Wood',
                        ],
                    ],
                ],
            ],
        ];
        $response->assertStatus(200)->assertExactJson($expected)->assertJson($expected);

        $this->assertQueryCount(2);
    }

    /** @test */
    public function it_can_combine_relations_filters_and_sorts()
    {
        $response = $this->json('GET', 'jory/band', [
            'jory' => [
                'fld' => 'name',
                'flt' =>
                    [
                        'f' => 'name',
                        'o' => 'like',
                        'd' => '%in%',
                    ],
                'srt' => '-name',
                'rlt' =>
                    [
                        'people' =>
                            [
                                'flt' =>
                                    [
                                        'f' => 'last_name',
                                        'o' => 'like',
                                        'd' => '%a%',
                                    ],
                                'srt' =>'-last_name',
                                'fld' => 'last_name',
                            ],
                    ],
            ],
        ]);

        $expected = [
            'data' => [
                [
                    'name' => 'Rolling Stones',
                    'people' => [
                        [
                            'last_name' => 'Watts',
                        ],
                        [
                            'last_name' => 'Richards',
                        ],
                        [
                            'last_name' => 'Jagger',
                        ],
                    ],
                ],
                [
                    'name' => 'Led Zeppelin',
                    'people' => [
                        [
                            'last_name' => 'Plant',
                        ],
                        [
                            'last_name' => 'Page',
                        ],
                        [
                            'last_name' => 'Bonham',
                        ],
                    ],
                ],
            ],
        ];
        $response->assertStatus(200)->assertExactJson($expected)->assertJson($expected);

        $this->assertQueryCount(2);
    }

    /** @test */
    public function it_can_apply_a_custom_sort()
    {
        $response = $this->json('GET', 'jory/album', [
            'jory' => [
                'srt' =>
                    [
                        'number_of_songs',
                        'name',
                    ],
                'fld' =>
                    [
                        'id',
                        'name',
                    ],
            ],
        ]);

        $expected = [
            'data' => [
                [
                    'id' => 4,
                    'name' => 'Led Zeppelin',
                ],
                [
                    'id' => 5,
                    'name' => 'Led Zeppelin II',
                ],
                [
                    'id' => 1,
                    'name' => 'Let it bleed',
                ],
                [
                    'id' => 6,
                    'name' => 'Led Zeppelin III',
                ],
                [
                    'id' => 2,
                    'name' => 'Sticky Fingers',
                ],
                [
                    'id' => 10,
                    'name' => 'Are you experienced',
                ],
                [
                    'id' => 9,
                    'name' => 'Let it be',
                ],
                [
                    'id' => 11,
                    'name' => 'Axis: Bold as love',
                ],
                [
                    'id' => 7,
                    'name' => 'Sgt. Peppers lonely hearts club band',
                ],
                [
                    'id' => 12,
                    'name' => 'Electric ladyland',
                ],
                [
                    'id' => 8,
                    'name' => 'Abbey road',
                ],
                [
                    'id' => 3,
                    'name' => 'Exile on main st.',
                ],
            ],
        ];
        $response->assertStatus(200)->assertExactJson($expected)->assertJson($expected);

        $this->assertQueryCount(1);
    }

    /** @test */
    public function it_can_apply_a_custom_sort_2()
    {
        $response = $this->json('GET', 'jory/album', [
            'jory' => [
                'srt' =>
                    [
                        'band_name',
                        'number_of_songs',
                    ],
                'fld' =>
                    [
                        'id',
                        'name',
                    ],
            ],
        ]);

        $expected = [
            'data' => [
                [
                    'id' => 9,
                    'name' => 'Let it be',
                ],
                [
                    'id' => 7,
                    'name' => 'Sgt. Peppers lonely hearts club band',
                ],
                [
                    'id' => 8,
                    'name' => 'Abbey road',
                ],
                [
                    'id' => 10,
                    'name' => 'Are you experienced',
                ],
                [
                    'id' => 11,
                    'name' => 'Axis: Bold as love',
                ],
                [
                    'id' => 12,
                    'name' => 'Electric ladyland',
                ],
                [
                    'id' => 4,
                    'name' => 'Led Zeppelin',
                ],
                [
                    'id' => 5,
                    'name' => 'Led Zeppelin II',
                ],
                [
                    'id' => 6,
                    'name' => 'Led Zeppelin III',
                ],
                [
                    'id' => 1,
                    'name' => 'Let it bleed',
                ],
                [
                    'id' => 2,
                    'name' => 'Sticky Fingers',
                ],
                [
                    'id' => 3,
                    'name' => 'Exile on main st.',
                ],
            ],
        ];
        $response->assertStatus(200)->assertExactJson($expected)->assertJson($expected);

        $this->assertQueryCount(1);
    }

    /** @test */
    public function it_can_apply_a_sort_by_a_local_scope_on_the_related_model()
    {
        $response = $this->json('GET', 'jory/album-cover', [
            'jory' => [
                'fld' => 'image',
                'srt' => 'album_name',
                'lmt' => 4,
            ],
        ]);

        $expected = [
            'data' => [
                [
                    'image' => '@@@@@@@@@#@@@@@@@@@@@@@@@#@@@@=#=:----------------------------------------+=###
@@@@@@@@@@@@#@@@##@@@@@@@@@@@#=**+:---------------------------------------+###@
@@@@@@@@@@@#@@@@#####@@@@@######+++------------------------------------++*#@@##
@@@@@@@@@@@@@@@#@##@@#===###=*=:*=:---------------------------------:::#@@@##@@
@@@@@@@@@@@@@@######==###@@=*#====*+++**:------------------------+::=*@@#@@#@=#
@@@@@@@@@@@@@@@@@@###@@#@@@####=###===*----------------::--::-::+=:*=+*#@#@@@==
@@@@@@@@@@@@@@####======#@#=#==****+::-------------:+**====#=*=*#=**=*=#==##=#@
@@@@@@@@@@@@@@@@#=#@@@######=#=##+----------------:*=######=#==#==#=@###===#=##
@#@@@@@@@@@@@@@@@@@@@@#@@@@@@@@#=+---------------+=##=##=###=====#@@@@@#@##@@@@
@@@@@@@@@@@@@@@@@@#@@@@#====#@#=##*-------------+=#@#####========@@@@###@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@####@#=+:::-----------*#=#=@#@##=###=#@@@@@@@@@@@@@@@
@@@@@@@@@@@@#@@@@@@@@@@#@@@##=#===*:----------:-++===#######==#@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@#@@@###=#==*:---------:=#@@#@*=#####@@#@@@#@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@##@@####+:------:+*==#@####=#=#@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@####@###=+------+#=#=#@=#@#@*=##@###@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@#@@@@@@@@@@##=##@#=#@#=+----+###==#@@@@@@=@@@##@@@@@@@@@@@@@@@@@@@@
@@@@#*#@@@@@#@@@@@@@@@@@@=#@@###@===*-==###=@##==@@@##@@@@@@###@@##@@@##@@@@@@@
@#@==*#@@@@@@##@@@@@#*=@@#==*@@@##=#==#=######=+++====#@@@@@@@@@@####@#@@@@@@@@
@@@@@@@@@@@@@#@@@#@@@==#@#*+=##*==+++++:***=*****=====#=#@@@@==@**===@=*#=@@###
@@@@@@@@@@@@#@@@@#@####====+***::+**********=*=+****::*@@@@@#@@@#+***#@=##@@@@@
@@@@@@@@@@@##@#===*:-:*###==**=@##***==***==***==###=+*@#@@@@##@@#@@@@@@@#@@@@#
@@@@@@@@@@@@++*::+++:=*+####@@#**========*=======#@@#+*#@=#=#=###***@@@@@@@@@@@
@@@@@@@@@@####**=:-:-:*-####@=:*=##====*=*===#=*:*****=====***=##==*####@@@@@@@
@@@######**=#==#*+**+##@#=====#*=========**==@#:===****++**++**----***++******=
########=**=*=@@@@@@@#=====####=#=======***=@@@@=======******+:----**+*****+***
########=*+*=######======*=#####@#=======*:=@@@@#========****+-----+++=#*+**+++
@########=***###==============##@@========:*@@@@@============+----:**+++++*#=++
==#@##=***=##:+*==*=======##==###@========+#@@@@@===========:-----+********+++*
#==========#@=*===========#@+*#===========@@@@@@@@+========:-:----:==*****+++++
==*====*===*#=============#@@*##==========@@@@@@@=============::---*=**********
==***++*=====#=#:::::::*###@####*-:::-*===#@@*-@@@:--=#===#=+---:--:#=#===*+++*
------*=======*==+:--:####@##==##*---:#==@@@#*--@@=--:#####:-----:---+#======:-
---*#=====#*:++=**+-=######@#++=@##+-*=#@@@###:-+@@@--:##:--:#=--------+##===##
+=#====##+:*+::+==+:+=**=#@*:****##+-=#@@@@@@#+*+=@@#------#@@@@+--------+#####
##=#+::++:------:=####==##+-----:++**#@@@@#===:--+#@##::-*@#####@#+--------+###
####=:---------=###===###+----------=##=======+---------:+===######:--:------+#
#@*-:---::---+#=#=#=####+----------:#######==#*-----------=#===#====+----------
*-::::::---:###==###=##*-----------*#====#=##=#------------#####======:--------
::::::::--=######=####*------------#=#=####=#=#:-----------:######===##+-------
:::::---+@###########+------::----+##=#===#=###:------------:#######=###=------',
                ],
                [
                    'image' => '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
++++++++++++++++++++++++++++++++*==***=*==*==***+++++++++++++++++++++++++++++++
+++++++***+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
+++++++====#*++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
+++++*===*===+++++++*##=*=*++****##=++++++=+=*+++++++++++++++++++++++++++++++++
++*#########*#=####*#=*####*+*###*==*###**#====*=*+*==*====*=====*=*==*=*==++++
+++++++=###=*#=#*==*##+###*+++*##=#=======#==#*#=*#=#*=#=#======#==*=*==##=*+++
+++++++=####*===#*#*##*###=***###=*=+*=*+*****#*=**==*=***=**==***==*+**==#*+++
+++++++#####=+**=*+*##*##########=++++++++++++++++++++++++++++++++*********++++
++++++*=####*++++++++++=###***###*+++++++++++++++++++++++++++++++********=**+++
+++++#=#*###=++++++++++*##*+++=##++++++++++++++++++++++++++++++++++++++*****+++
+++++=***####=++++++*#=*##**++=##===:::--::+*===**+++++++++++++++++++++++++++++
++++++=#####=+++++++*###==##=*#*###+:--::::+++:+*===*++++++++++++++++++++++++++
+++++++++++++++++++++++*==**+++***+:+:------:::++**++*=*+++++++++++++++++++++++
+++++++++++++++++++++*=+--:*+:+::+--::::----:::-:++++:::**+++++++++++++++++++++
+++++++++++++++++++*=+++*:=++++**++::+:+::---::--:++++:::+=*+++++++++++++++++++
++++++++++++++++++*==+*=***++*+*******+:**++:++*****+:::+++=*++++++++++++++++++
+++++++++++++++++*====*+:+*=*=+++****==#@@@@#=*****++++*++**==+++++++++++++++++
++++++++++++++++*=#*=+***=**:=#@@#**=#@W#=*=@@#=*+====*+++**+**++++++++++++++++
++++++++++++++++==*****===*=@W@WWWW###@W*+=+=@=**##=::#=+:::::=*+++++++++++++++
+++++++++++++++**+=**===###@@+*#@WW@#===###==****#@#=::++:--:-+=+++++++++++++++
+++++++++++++++****===#=#=###+##WW#=*=******==*****=*=+:+-:-:--**++++++++++++++
+++++++++++++++=*====##****#@@@@@#=#***+****++*+**==*==*+-::---**++++++++++++++
+++++++++++++++==#####=****=#*==*****+:::+++*+:*****+=:::-::::+**++++++++++++++
+++++++++++++++*==####******=***==#+*:---:+::-+*:**:+++++::-::*=*++++++++++++++
+++++++++++++++*=#==#=*+=****#=##@#+:----:+:---+:+**+++++:::++*=+++++++++++++++
++++++++++++++++=####=*=****=####@##----:++----:+:+:+:::**:-+:=*+++++++++++++++
++++++++====++++*=###=***+===@@@##=+----::::---++:++**+:+++:*+*++++*==*++++++++
+++++++*==+****++*=@#*=**=#==##==##*:::::::----:+:::=**+*++***++***+*==*+++++++
++++++*=====*==*++*=@+***@=*##=*===*::*+::+:+:-:::+=##==*===*++==*+=**==*++++++
++++*=*+*===*=====++****=*====*=#==+++**::+:+++++++=++::++*****====+*====*+++++
++++==**==========*++*=*====*#=#=##++@=**++*=:::++==++++**+*=*====*=*=+*==*++++
++++*======*===**===*++**=**=##=*=@@#==##=*++:+=*+@=++**++**==*+*=*=*=====*++++
++++*========*====****==*+**=####===*=**####==##===**++**===*==*+==*======+++++
++++++***======*+++**===*=**++***==*=====@#=*****++++*=*=====*===*+*=+***++++++
++++++++++==*==*+*==**+*===*=*=*+**++++++++++++*====*=**=*==+=*=====*++++++++++
++++++++++++**====*=***==*===*=**=*=**=====*===**==*===+**=*++***++++++++++++++
+++++++++++++++++++*====**===*====*=****==*=*=**===*=*=***=++++++++++++++++++++
+++++++++++++++++++++++++++++++++++****=**===*==+++****++++++++++++++++++++++++
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++',
                ],
                [
                    'image' => '************++++++++++++******+++:::+::----::+::::+******+++++++++*+***********
****************+++++++++++*+++:--:****+++*+**+--:+++++++++++++++**************
***************++***+::::::::--:***++::-::++*++**+--+:::++++++*+***************
++++************++++++++:::-.:***+::+++++++++:+:++*+--:::+**+*++************+++
+++++++++++++++**+++++++++-.+*+*-:++::::::::++++:++++-:+++**++*****+++:++++++++
++++++++++++++::::::::+++:-:*++:+::::--:-::-::++:+:+++-:**++::::+:+++++:+++++++
++++++++++++++++:::::::::--+++::+++:::::::+::::+++:++*---::::::::+++::+++++++++
+++++++++++++++::::::::::--***+++:::-::::-::-:-:++::++:.-:::::::+++++++++++++++
**********+++++++++++++++:-*++-:::::::::::::::+++++++*--++*********************
**********+++++++++++++++:-:*++-++:+:::+::+::++::+:+++.-+**********************
************+++***++::::::--:*::+:+#@@#*===#@@@#*-:+*-.::::::++****************
***********+++++:++++:::::=#@@#*:@+:---+=**-.-:++#*#==#@@+::+:++++++++*********
****+++++++++++++++=@#@#@#:.-:-*#=+:-+...:..*--:+##:...-*##@*=##+:+++++++++++**
+++++++++++++++*=#@+..-+@*-+...::#*:--......:.-:##--..:+@=:..-:@@##@=++++++++++
+++++++++++++@=+++:=::..+**#*:-..-*=+:-.....-+*#:....:#:-...::#:----#++++++++++
+++++++++++:*#+*:.-:+::++*+-.:*#*:--+++=##=*++:--+:+*+++::**::::++==.--:++:***+
++++++++=+..=**##*:+=*++:*=@WWWWWWWWWWWWWWWWWWWW@WWWW@#+++:#+::=+:+#+.-++=*+**=
++:::+:+*.-++::*++:+**++=@@WWWWWWWWWWWWWWWWWWWWWWWWWWWW@=+++**:++*++*:--**+*+++
*+++++::.--+++:++++*+:::*WWWWWWWWWWWWWWWWWWWWWWWWWWWWWWW@:::=+:-++:+-:::-:::-::
**+::+++-.-*-+##*==@#---+WWWWWWWWWWWWWWWW@WWWWWWWW@*:-#W#---+--.+=::*+::=*+:*++
**+:+:++*:+*+=**:++*=*::=+=*=WWWWWW@#+-.--:*WWWWW@@=+=*##+*##=:*@#==++:*::---..
*+====#*-+:+:-::+*#**::-:+::*WWWWWWW=#=***#==@WWW@+----+-:+-::+-==*#*::--**:+::
:*:*:=++...-++*==*:+=::*+:+.+W@WWWWW*-+::+.-+@WWW@#-.::==*==-+-+@*+:....+*=:**:
+*:+:=++-..*=*=*:+==*:+--:=-.-#@W@WW@****=:-+=#W@++-..:*==+:**+++:++...:++*:==+
*++@*++++.-*+==:::+:::::+*=*:*..-:++@=*=#*::==+++---*+:+**++:-:=*+:::.:+::+=+*=
*=++**=+++++*==:+++:+*--:*-:+#*=*+.-**=*+*=+**+:*=*=@=-:---+-:+-=#*++::----:=*+
+:::**+-*+=#+=*:++-.-:::**+#:+***=#++=++::+++=*:+#**+:*+:*+:++++++++:+++::+=+==
=:*.*:+.***:*:++++-.-*++*=+:#+*+**=+:+**+++**+:++#=-+:++==*+:+--++:++:+*:+**+@#
*-*.-*-:+=+:=-:+++--*+**++*++*+*+:+**:**++++++++.-+++*:*:*==:*-:*+--*:**:=*:+++
+-:+-:-*****#.-*+*:-*:***:+=:==*+++*+:::+::+::-+.-+-++++:=:+-::=+:--+*+-++++:.-
-++++*+*=+=#=--:+**:--:+*+:=+*===*==*--::*::--::.:=+**++*+*---+*+-:=*+-+*+++..:
.:+++=++#:-*==+-::**-::#*+*+*=#==+**=+::***+++*-.*=***++*-::*+*:-:=+:::+***++-*
:.+++**:=*--***=:-++=*::+++*==*:-:*:+*++:+*-**+.-=*=**:::-**++*::*:-::*+**:+**+
+-.+++#+=*:-:--:*=**+*-++:+*+---:**##*-+:++:+***#===*+*++*----++:=+:*+*+::*+:*+
++-.+-::-+*++*:*+:---:*:-*+++--:##+*#*+*=***=:**#===:-.:*:+::+++:++++:::-++:*+*
+++-.:+=*--:++*=*+=*+:*:-==**+=#==:=@=*=**+***:*#===:..-**+---++-::+:-++**+**+:
++++-.:*=:---:--*=*+:--++:**=*=**=-.-+***+:*++-.:*=*+---+:**:--:+*+=****++:---+
+++++--+#++*=+++****+::-:*+*:***==:.:+*+:**-+*..:#*=*::+:+--+-++:=:-:-----+*::+
++++++-::--:++:+::++*==*-:**=+==+=-.-=::*-:**=-.+*+=**=-+*+:-+*+-+***:*=***::*+
+++++:::***----+-:::+++++*=:***+=+--+:=#:--+*+:*#:++***=-*+*:*:*++---:+:::++:**',
                ],
                [
                    'image' => '========================###========#===========================================
=======================####=================********===========================
=========================##=================**+*++++****===================*===
===========================#===============**++++++++++++**====================
===============================#=========*+++::+++++********==================#
=======================================*+++::::::::::++**===*===##============#
=====================================**+++++++:::---:++******+**===============
==============####==================****++++++++++::+++**++++++**=============*
==============###==================**+++++++++::++*******++::++**==============
=======================#=========*+++++++++++:::::+++****+++:+***==============
================================*++++++++++::--::::::::++:::::++**=============
===============================**+++++++++:::---::::::::::::::::::+*===========
============================***+++++++++::::-------::::++++++***+:-:+*=======**
======##=========****++*====**+++++++++:::--------::::::++++*====*++**=========
==#===####======*+++++:+*=**+++++++++++::-------::::::::::::++++*==**==========
==##==##====#=====***=******++++++++:::::-----::::::::::++++++++*=============#
======================*****+++++++::::::::-::::::::::::+++::+******===========#
===============***********+++++++::::::::::::::::+::::++****+:+*==*==========##
===============*****+++**++++++++:::::::::::::::::::++*=====*+--****=======####
==============**++++++++*+++++++++++::::::::::::::::::+*=======+**===##########
=============**+++++++++**++++++++++::::::::::::++::::::++**===++**=###########
####========**++++:+++++***+++++++++++::::::::::::::--:::::++*=***==###########
###=======***++++::::::+****=***++++++++::++++::::------::::::***=#############
##===*******+++::::::::+++*********++++++++++++:::-----:+++++****=##===########
@#==**+++++++++::::::::::+++***********++++++++::::::::++********=#############
@@@#=+++++++++:::::::---:+++++************++++++:::::::++**====*=##############
@@@@##*+++++++:::::::::::++++++**************++++:::::+++****===###############
@@@@@##=++++++::::::::::::++++++++*********=*****+++::+*******=################
@@@@@@@##*++++::::::::::::++++++++++**==========************=##################
@@@@@@@@##+++:::::::::::::+++++::::+++*============********=##@################
@@@@@@@@@#=++::::::::::::+++++++++++++*============********#@@#################
@@@@@@@@@@@=+::::::::::::+++++++*******===============*===#@###################
@@@@@@@@@@@#=+::::::::::+++++***=====================#####@####################
@@@@@@@@@@@@#*++::::::::+++**===========##############@###@####################
@@@@WWWWWWW@@=*++:::::++**===========#@@@@###############@@####################
@@WWWWWWWWWWW#*++++++***===========#@@@@@@##########@@##@#############@########
@@WWWWWWWWWWW@=*+*****========**==#@@@@@@@@@###@#@#@#@#@@@@###@#####@##########
@WW@WWWWWWWWWW#*****=**===*****===@@@@@@@@####@@###@@@@#@#@@@@##@#@############
@@@@@@@WWW@@@@@=**==*****+***====@@@@@@@@@@@@#######@###@###@###@##############
@@@@@@@@@@@@@@@=****+++******==#@#@@#@#@@@@@###################################',
                ],
            ],
        ];
        $response->assertStatus(200)->assertExactJson($expected)->assertJson($expected);

        $this->assertQueryCount(1);
    }

    /** @test */
    public function it_can_apply_sorting_by_using_a_sort_scope_class()
    {
        $response = $this->json('GET', 'jory/album', [
            'jory' => [
                'srt' => ['-alphabeticName'],
                'fld' => [
                    'name',
                ],
                'lmt' => 4,
            ],
            'case' => 'camel'
        ]);

        $response->assertStatus(200)->assertExactJson([
            'data' => [
                [
                    'name' => 'Sticky Fingers'
                ],
                [
                    'name' => 'Sgt. Peppers lonely hearts club band'
                ],
                [
                    'name' => 'Let it bleed'
                ],
                [
                    'name' => 'Let it be'
                ],
            ],
        ]);

        $this->assertQueryCount(1);
    }

    /** @test */
    public function it_can_apply_a_sort_via_the_field_using_a_sort_scope_class()
    {
        Jory::register(PersonJoryResourceWithScopes::class);

        $response = $this->json('GET', 'jory/person', [
            'jory' => [
                'srt' => ['dateOfBirth'],
                'fld' => [
                    'lastName',
                ],
                'lmt' => 3,
            ],
            'case' => 'camel'
        ]);

        $response->assertStatus(200)->assertExactJson([
            'data' => [
                [
                    'lastName' => 'Watts',
                ],
                [
                    'lastName' => 'Harrison',
                ],
                [
                    'lastName' => 'Hendrix',
                ],
            ],
        ]);

        $this->assertQueryCount(1);
    }

    /** @test */
    public function it_can_apply_via_the_field_using_a_filter_scope_class_when_requesting_a_relation()
    {
        Jory::register(PersonJoryResourceWithScopes::class);

        $response = $this->json('GET', 'jory/band/3', [
            'jory' => [
                'fld' => [
                    'name',
                ],
                'rlt' => [
                    'people' => [
                        'fld' => ['lastName'],
                        'srt' => ['-dateOfBirth'],
                    ]
                ]
            ],
            'case' => 'camel'
        ]);

        $response->assertStatus(200)->assertExactJson([
            'data' => [
                'name' => 'Beatles',
                'people' => [
                    [
                        'lastName' => 'Starr',
                    ],
                    [
                        'lastName' => 'McCartney',
                    ],
                    [
                        'lastName' => 'Lennon',
                    ],
                    [
                        'lastName' => 'Harrison',
                    ],
                ]
            ],
        ]);

        $this->assertQueryCount(2);
    }
}
